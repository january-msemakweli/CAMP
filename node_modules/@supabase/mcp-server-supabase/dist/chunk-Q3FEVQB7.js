var b="0.3.5";import{createMcpServer as ae,tool as i}from"@supabase/mcp-utils";import{z as t}from"zod";import{stripIndent as m}from"common-tags";function A(s,r=100){switch(s){case"api":return m`
        select id, identifier, timestamp, event_message, request.method, request.path, response.status_code
        from edge_logs
        cross join unnest(metadata) as m
        cross join unnest(m.request) as request
        cross join unnest(m.response) as response
        order by timestamp desc
        limit ${r}
      `;case"branch-action":return m`
        select workflow_run, workflow_run_logs.timestamp, id, event_message from workflow_run_logs
        order by timestamp desc
        limit ${r}
      `;case"postgres":return m`
        select identifier, postgres_logs.timestamp, id, event_message, parsed.error_severity from postgres_logs
        cross join unnest(metadata) as m
        cross join unnest(m.parsed) as parsed
        order by timestamp desc
        limit ${r}
      `;case"edge-function":return m`
        select id, function_edge_logs.timestamp, event_message, response.status_code, request.method, m.function_id, m.execution_time_ms, m.deployment_id, m.version from function_edge_logs
        cross join unnest(metadata) as m
        cross join unnest(m.response) as response
        cross join unnest(m.request) as request
        order by timestamp desc
        limit ${r}
      `;case"auth":return m`
        select id, auth_logs.timestamp, event_message, metadata.level, metadata.status, metadata.path, metadata.msg as msg, metadata.error from auth_logs
        cross join unnest(metadata) as metadata
        order by timestamp desc
        limit ${r}
      `;case"storage":return m`
        select id, storage_logs.timestamp, event_message from storage_logs
        order by timestamp desc
        limit ${r}
      `;case"realtime":return m`
        select id, realtime_logs.timestamp, event_message from realtime_logs
        order by timestamp desc
        limit ${r}
      `;default:throw new Error(`unsupported log service type: ${s}`)}}import k from"openapi-fetch";import{z as N}from"zod";function j(s,r,n={}){return k({baseUrl:s,headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`,...n}})}var F=N.object({message:N.string()});function l(s,r){if("error"in s){if(s.response.status===401)throw new Error("Unauthorized. Please provide a valid access token to the MCP server via the --access-token flag.");let{data:n}=F.safeParse(s.error);throw n?new Error(n.message):new Error(r)}}var G="ABCDEFGHIJKLMNOPQRSTUVWXYZ",W="abcdefghijklmnopqrstuvwxyz",q="0123456789",B="!@#$%^&*()_+~`|}{[]:;?><,./-=",w=({length:s=10,numbers:r=!1,symbols:n=!1,uppercase:g=!0,lowercase:d=!0}={})=>{let p="";if(g&&(p+=G),d&&(p+=W),r&&(p+=q),n&&(p+=B),p.length===0)throw new Error("at least one character set must be selected");let e=new Uint32Array(s);crypto.getRandomValues(e);let a="";for(let o=0;o<s;o++){let c=e[o]%p.length;a+=p.charAt(c)}return a};import{stripIndent as x}from"common-tags";var C=`-- Adapted from information_schema.columns

SELECT
  c.oid :: int8 AS table_id,
  nc.nspname AS schema,
  c.relname AS table,
  (c.oid || '.' || a.attnum) AS id,
  a.attnum AS ordinal_position,
  a.attname AS name,
  CASE
    WHEN a.atthasdef THEN pg_get_expr(ad.adbin, ad.adrelid)
    ELSE NULL
  END AS default_value,
  CASE
    WHEN t.typtype = 'd' THEN CASE
      WHEN bt.typelem <> 0 :: oid
      AND bt.typlen = -1 THEN 'ARRAY'
      WHEN nbt.nspname = 'pg_catalog' THEN format_type(t.typbasetype, NULL)
      ELSE 'USER-DEFINED'
    END
    ELSE CASE
      WHEN t.typelem <> 0 :: oid
      AND t.typlen = -1 THEN 'ARRAY'
      WHEN nt.nspname = 'pg_catalog' THEN format_type(a.atttypid, NULL)
      ELSE 'USER-DEFINED'
    END
  END AS data_type,
  COALESCE(bt.typname, t.typname) AS format,
  a.attidentity IN ('a', 'd') AS is_identity,
  CASE
    a.attidentity
    WHEN 'a' THEN 'ALWAYS'
    WHEN 'd' THEN 'BY DEFAULT'
    ELSE NULL
  END AS identity_generation,
  a.attgenerated IN ('s') AS is_generated,
  NOT (
    a.attnotnull
    OR t.typtype = 'd' AND t.typnotnull
  ) AS is_nullable,
  (
    c.relkind IN ('r', 'p')
    OR c.relkind IN ('v', 'f') AND pg_column_is_updatable(c.oid, a.attnum, FALSE)
  ) AS is_updatable,
  uniques.table_id IS NOT NULL AS is_unique,
  check_constraints.definition AS "check",
  array_to_json(
    array(
      SELECT
        enumlabel
      FROM
        pg_catalog.pg_enum enums
      WHERE
        enums.enumtypid = coalesce(bt.oid, t.oid)
        OR enums.enumtypid = coalesce(bt.typelem, t.typelem)
      ORDER BY
        enums.enumsortorder
    )
  ) AS enums,
  col_description(c.oid, a.attnum) AS comment
FROM
  pg_attribute a
  LEFT JOIN pg_attrdef ad ON a.attrelid = ad.adrelid
  AND a.attnum = ad.adnum
  JOIN (
    pg_class c
    JOIN pg_namespace nc ON c.relnamespace = nc.oid
  ) ON a.attrelid = c.oid
  JOIN (
    pg_type t
    JOIN pg_namespace nt ON t.typnamespace = nt.oid
  ) ON a.atttypid = t.oid
  LEFT JOIN (
    pg_type bt
    JOIN pg_namespace nbt ON bt.typnamespace = nbt.oid
  ) ON t.typtype = 'd'
  AND t.typbasetype = bt.oid
  LEFT JOIN (
    SELECT DISTINCT ON (table_id, ordinal_position)
      conrelid AS table_id,
      conkey[1] AS ordinal_position
    FROM pg_catalog.pg_constraint
    WHERE contype = 'u' AND cardinality(conkey) = 1
  ) AS uniques ON uniques.table_id = c.oid AND uniques.ordinal_position = a.attnum
  LEFT JOIN (
    -- We only select the first column check
    SELECT DISTINCT ON (table_id, ordinal_position)
      conrelid AS table_id,
      conkey[1] AS ordinal_position,
      substring(
        pg_get_constraintdef(pg_constraint.oid, true),
        8,
        length(pg_get_constraintdef(pg_constraint.oid, true)) - 8
      ) AS "definition"
    FROM pg_constraint
    WHERE contype = 'c' AND cardinality(conkey) = 1
    ORDER BY table_id, ordinal_position, oid asc
  ) AS check_constraints ON check_constraints.table_id = c.oid AND check_constraints.ordinal_position = a.attnum
WHERE
  NOT pg_is_other_temp_schema(nc.oid)
  AND a.attnum > 0
  AND NOT a.attisdropped
  AND (c.relkind IN ('r', 'v', 'm', 'f', 'p'))
  AND (
    pg_has_role(c.relowner, 'USAGE')
    OR has_column_privilege(
      c.oid,
      a.attnum,
      'SELECT, INSERT, UPDATE, REFERENCES'
    )
  )
`;var O=`SELECT
  e.name,
  n.nspname AS schema,
  e.default_version,
  x.extversion AS installed_version,
  e.comment
FROM
  pg_available_extensions() e(name, default_version, comment)
  LEFT JOIN pg_extension x ON e.name = x.extname
  LEFT JOIN pg_namespace n ON x.extnamespace = n.oid
`;var R=`SELECT
  c.oid :: int8 AS id,
  nc.nspname AS schema,
  c.relname AS name,
  c.relrowsecurity AS rls_enabled,
  c.relforcerowsecurity AS rls_forced,
  CASE
    WHEN c.relreplident = 'd' THEN 'DEFAULT'
    WHEN c.relreplident = 'i' THEN 'INDEX'
    WHEN c.relreplident = 'f' THEN 'FULL'
    ELSE 'NOTHING'
  END AS replica_identity,
  pg_total_relation_size(format('%I.%I', nc.nspname, c.relname)) :: int8 AS bytes,
  pg_size_pretty(
    pg_total_relation_size(format('%I.%I', nc.nspname, c.relname))
  ) AS size,
  pg_stat_get_live_tuples(c.oid) AS live_rows_estimate,
  pg_stat_get_dead_tuples(c.oid) AS dead_rows_estimate,
  obj_description(c.oid) AS comment,
  coalesce(pk.primary_keys, '[]') as primary_keys,
  coalesce(
    jsonb_agg(relationships) filter (where relationships is not null),
    '[]'
  ) as relationships
FROM
  pg_namespace nc
  JOIN pg_class c ON nc.oid = c.relnamespace
  left join (
    select
      table_id,
      jsonb_agg(_pk.*) as primary_keys
    from (
      select
        n.nspname as schema,
        c.relname as table_name,
        a.attname as name,
        c.oid :: int8 as table_id
      from
        pg_index i,
        pg_class c,
        pg_attribute a,
        pg_namespace n
      where
        i.indrelid = c.oid
        and c.relnamespace = n.oid
        and a.attrelid = c.oid
        and a.attnum = any (i.indkey)
        and i.indisprimary
    ) as _pk
    group by table_id
  ) as pk
  on pk.table_id = c.oid
  left join (
    select
      c.oid :: int8 as id,
      c.conname as constraint_name,
      nsa.nspname as source_schema,
      csa.relname as source_table_name,
      sa.attname as source_column_name,
      nta.nspname as target_table_schema,
      cta.relname as target_table_name,
      ta.attname as target_column_name
    from
      pg_constraint c
    join (
      pg_attribute sa
      join pg_class csa on sa.attrelid = csa.oid
      join pg_namespace nsa on csa.relnamespace = nsa.oid
    ) on sa.attrelid = c.conrelid and sa.attnum = any (c.conkey)
    join (
      pg_attribute ta
      join pg_class cta on ta.attrelid = cta.oid
      join pg_namespace nta on cta.relnamespace = nta.oid
    ) on ta.attrelid = c.confrelid and ta.attnum = any (c.confkey)
    where
      c.contype = 'f'
  ) as relationships
  on (relationships.source_schema = nc.nspname and relationships.source_table_name = c.relname)
  or (relationships.target_table_schema = nc.nspname and relationships.target_table_name = c.relname)
WHERE
  c.relkind IN ('r', 'p')
  AND NOT pg_is_other_temp_schema(nc.oid)
  AND (
    pg_has_role(c.relowner, 'USAGE')
    OR has_table_privilege(
      c.oid,
      'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'
    )
    OR has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES')
  )
group by
  c.oid,
  c.relname,
  c.relrowsecurity,
  c.relforcerowsecurity,
  c.relreplident,
  nc.nspname,
  pk.primary_keys
`;var Y=["information_schema","pg_catalog","pg_toast"];function L(s=[]){let r=x`
    with
      tables as (${R}),
      columns as (${C})
    select
      *,
      ${J("columns","columns.table_id = tables.id")}
    from tables
  `;return s.length>0?r+=`  where schema in (${s.map(n=>`'${n}'`).join(",")})`:r+=`  where schema not in (${Y.map(n=>`'${n}'`).join(",")})`,r}function I(){return O}var J=(s,r)=>x`
    COALESCE(
      (
        SELECT
          array_agg(row_to_json(${s})) FILTER (WHERE ${r})
        FROM
          ${s}
      ),
      '{}'
    ) AS ${s}
  `;var V=10,Z=.01344;async function f(s,r){let n=await s.GET("/v1/organizations/{slug}",{params:{path:{slug:r}}});l(n,"Failed to fetch organization");let g=await s.GET("/v1/projects");l(g,"Failed to fetch projects");let d=n.data,p=g.data.filter(a=>a.organization_id===r&&!["INACTIVE","GOING_DOWN","REMOVED"].includes(a.status)),e=0;return d.plan!=="free"&&p.length>0&&(e=V),{type:"project",recurrence:"monthly",amount:e}}function E(){return{type:"branch",recurrence:"hourly",amount:Z}}function v(s){return Object.fromEntries(s.split(`
`).map(r=>r.split(/=(.*)/)).filter(([r])=>r).map(([r,n])=>[r,n??""]))}async function _(s,r){let n=JSON.stringify(s,(p,e)=>e&&typeof e=="object"&&!Array.isArray(e)?Object.keys(e).sort().reduce((a,o)=>(a[o]=e[o],a),{}):e),g=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(n));return btoa(String.fromCharCode(...new Uint8Array(g))).slice(0,r)}var Q=6371,X="https://www.cloudflare.com/cdn-cgi/trace",ee={AF:{lat:33,lng:65},AX:{lat:60.116667,lng:19.9},AL:{lat:41,lng:20},DZ:{lat:28,lng:3},AS:{lat:-14.3333,lng:-170},AD:{lat:42.5,lng:1.6},AO:{lat:-12.5,lng:18.5},AI:{lat:18.25,lng:-63.1667},AQ:{lat:-90,lng:0},AG:{lat:17.05,lng:-61.8},AR:{lat:-34,lng:-64},AM:{lat:40,lng:45},AW:{lat:12.5,lng:-69.9667},AU:{lat:-27,lng:133},AT:{lat:47.3333,lng:13.3333},AZ:{lat:40.5,lng:47.5},BS:{lat:24.25,lng:-76},BH:{lat:26,lng:50.55},BD:{lat:24,lng:90},BB:{lat:13.1667,lng:-59.5333},BY:{lat:53,lng:28},BE:{lat:50.8333,lng:4},BZ:{lat:17.25,lng:-88.75},BJ:{lat:9.5,lng:2.25},BM:{lat:32.3333,lng:-64.75},BT:{lat:27.5,lng:90.5},BO:{lat:-17,lng:-65},BQ:{lat:12.183333,lng:-68.233333},BA:{lat:44,lng:18},BW:{lat:-22,lng:24},BV:{lat:-54.4333,lng:3.4},BR:{lat:-10,lng:-55},IO:{lat:-6,lng:71.5},BN:{lat:4.5,lng:114.6667},BG:{lat:43,lng:25},BF:{lat:13,lng:-2},MM:{lat:22,lng:98},BI:{lat:-3.5,lng:30},KH:{lat:13,lng:105},CM:{lat:6,lng:12},CA:{lat:60,lng:-95},CV:{lat:16,lng:-24},KY:{lat:19.5,lng:-80.5},CF:{lat:7,lng:21},TD:{lat:15,lng:19},CL:{lat:-30,lng:-71},CN:{lat:35,lng:105},CX:{lat:-10.5,lng:105.6667},CC:{lat:-12.5,lng:96.8333},CO:{lat:4,lng:-72},KM:{lat:-12.1667,lng:44.25},CD:{lat:0,lng:25},CG:{lat:-1,lng:15},CK:{lat:-21.2333,lng:-159.7667},CR:{lat:10,lng:-84},CI:{lat:8,lng:-5},HR:{lat:45.1667,lng:15.5},CU:{lat:21.5,lng:-80},CW:{lat:12.166667,lng:-68.966667},CY:{lat:35,lng:33},CZ:{lat:49.75,lng:15.5},DK:{lat:56,lng:10},DJ:{lat:11.5,lng:43},DM:{lat:15.4167,lng:-61.3333},DO:{lat:19,lng:-70.6667},EC:{lat:-2,lng:-77.5},EG:{lat:27,lng:30},SV:{lat:13.8333,lng:-88.9167},GQ:{lat:2,lng:10},ER:{lat:15,lng:39},EE:{lat:59,lng:26},ET:{lat:8,lng:38},FK:{lat:-51.75,lng:-59},FO:{lat:62,lng:-7},FJ:{lat:-18,lng:175},FI:{lat:64,lng:26},FR:{lat:46,lng:2},GF:{lat:4,lng:-53},PF:{lat:-15,lng:-140},TF:{lat:-43,lng:67},GA:{lat:-1,lng:11.75},GM:{lat:13.4667,lng:-16.5667},GE:{lat:42,lng:43.5},DE:{lat:51,lng:9},GH:{lat:8,lng:-2},GI:{lat:36.1833,lng:-5.3667},GR:{lat:39,lng:22},GL:{lat:72,lng:-40},GD:{lat:12.1167,lng:-61.6667},GP:{lat:16.25,lng:-61.5833},GU:{lat:13.4667,lng:144.7833},GT:{lat:15.5,lng:-90.25},GG:{lat:49.5,lng:-2.56},GW:{lat:12,lng:-15},GN:{lat:11,lng:-10},GY:{lat:5,lng:-59},HT:{lat:19,lng:-72.4167},HM:{lat:-53.1,lng:72.5167},VA:{lat:41.9,lng:12.45},HN:{lat:15,lng:-86.5},HK:{lat:22.25,lng:114.1667},HU:{lat:47,lng:20},IS:{lat:65,lng:-18},IN:{lat:20,lng:77},ID:{lat:-5,lng:120},IR:{lat:32,lng:53},IQ:{lat:33,lng:44},IE:{lat:53,lng:-8},IM:{lat:54.23,lng:-4.55},IL:{lat:31.5,lng:34.75},IT:{lat:42.8333,lng:12.8333},JM:{lat:18.25,lng:-77.5},JP:{lat:36,lng:138},JE:{lat:49.21,lng:-2.13},JO:{lat:31,lng:36},KZ:{lat:48,lng:68},KE:{lat:1,lng:38},KI:{lat:1.4167,lng:173},KP:{lat:40,lng:127},KR:{lat:37,lng:127.5},XK:{lat:42.583333,lng:21},KW:{lat:29.3375,lng:47.6581},KG:{lat:41,lng:75},LA:{lat:18,lng:105},LV:{lat:57,lng:25},LB:{lat:33.8333,lng:35.8333},LS:{lat:-29.5,lng:28.5},LR:{lat:6.5,lng:-9.5},LY:{lat:25,lng:17},LI:{lat:47.1667,lng:9.5333},LT:{lat:56,lng:24},LU:{lat:49.75,lng:6.1667},MO:{lat:22.1667,lng:113.55},MK:{lat:41.8333,lng:22},MG:{lat:-20,lng:47},MW:{lat:-13.5,lng:34},MY:{lat:2.5,lng:112.5},MV:{lat:3.25,lng:73},ML:{lat:17,lng:-4},MT:{lat:35.8333,lng:14.5833},MH:{lat:9,lng:168},MQ:{lat:14.6667,lng:-61},MR:{lat:20,lng:-12},MU:{lat:-20.2833,lng:57.55},YT:{lat:-12.8333,lng:45.1667},MX:{lat:23,lng:-102},FM:{lat:6.9167,lng:158.25},MD:{lat:47,lng:29},MC:{lat:43.7333,lng:7.4},MN:{lat:46,lng:105},ME:{lat:42,lng:19},MS:{lat:16.75,lng:-62.2},MA:{lat:32,lng:-5},MZ:{lat:-18.25,lng:35},NA:{lat:-22,lng:17},NR:{lat:-.5333,lng:166.9167},NP:{lat:28,lng:84},AN:{lat:12.25,lng:-68.75},NL:{lat:52.5,lng:5.75},NC:{lat:-21.5,lng:165.5},NZ:{lat:-41,lng:174},NI:{lat:13,lng:-85},NE:{lat:16,lng:8},NG:{lat:10,lng:8},NU:{lat:-19.0333,lng:-169.8667},NF:{lat:-29.0333,lng:167.95},MP:{lat:15.2,lng:145.75},NO:{lat:62,lng:10},OM:{lat:21,lng:57},PK:{lat:30,lng:70},PW:{lat:7.5,lng:134.5},PS:{lat:32,lng:35.25},PA:{lat:9,lng:-80},PG:{lat:-6,lng:147},PY:{lat:-23,lng:-58},PE:{lat:-10,lng:-76},PH:{lat:13,lng:122},PN:{lat:-24.7,lng:-127.4},PL:{lat:52,lng:20},PT:{lat:39.5,lng:-8},PR:{lat:18.25,lng:-66.5},QA:{lat:25.5,lng:51.25},RE:{lat:-21.1,lng:55.6},RO:{lat:46,lng:25},RU:{lat:60,lng:100},RW:{lat:-2,lng:30},BL:{lat:17.897728,lng:-62.834244},SH:{lat:-15.9333,lng:-5.7},KN:{lat:17.3333,lng:-62.75},LC:{lat:13.8833,lng:-61.1333},MF:{lat:18.075278,lng:-63.06},PM:{lat:46.8333,lng:-56.3333},VC:{lat:13.25,lng:-61.2},WS:{lat:-13.5833,lng:-172.3333},SM:{lat:43.7667,lng:12.4167},ST:{lat:1,lng:7},SA:{lat:25,lng:45},SN:{lat:14,lng:-14},RS:{lat:44,lng:21},SC:{lat:-4.5833,lng:55.6667},SL:{lat:8.5,lng:-11.5},SG:{lat:1.3667,lng:103.8},SX:{lat:18.033333,lng:-63.05},SK:{lat:48.6667,lng:19.5},SI:{lat:46,lng:15},SB:{lat:-8,lng:159},SO:{lat:10,lng:49},ZA:{lat:-29,lng:24},GS:{lat:-54.5,lng:-37},SS:{lat:8,lng:30},ES:{lat:40,lng:-4},LK:{lat:7,lng:81},SD:{lat:15,lng:30},SR:{lat:4,lng:-56},SJ:{lat:78,lng:20},SZ:{lat:-26.5,lng:31.5},SE:{lat:62,lng:15},CH:{lat:47,lng:8},SY:{lat:35,lng:38},TW:{lat:23.5,lng:121},TJ:{lat:39,lng:71},TZ:{lat:-6,lng:35},TH:{lat:15,lng:100},TL:{lat:-8.55,lng:125.5167},TG:{lat:8,lng:1.1667},TK:{lat:-9,lng:-172},TO:{lat:-20,lng:-175},TT:{lat:11,lng:-61},TN:{lat:34,lng:9},TR:{lat:39,lng:35},TM:{lat:40,lng:60},TC:{lat:21.75,lng:-71.5833},TV:{lat:-8,lng:178},UG:{lat:1,lng:32},UA:{lat:49,lng:32},AE:{lat:24,lng:54},GB:{lat:54,lng:-2},UM:{lat:19.2833,lng:166.6},US:{lat:38,lng:-97},UY:{lat:-33,lng:-56},UZ:{lat:41,lng:64},VU:{lat:-16,lng:167},VE:{lat:8,lng:-66},VN:{lat:16,lng:106},VG:{lat:18.5,lng:-64.5},VI:{lat:18.3333,lng:-64.8333},WF:{lat:-13.3,lng:-176.2},EH:{lat:24.5,lng:-13},YE:{lat:15,lng:48},ZM:{lat:-15,lng:30},ZW:{lat:-20,lng:30}},S={WEST_US:{code:"us-west-1",displayName:"West US (North California)",location:{lat:37.774929,lng:-122.419418}},EAST_US:{code:"us-east-1",displayName:"East US (North Virginia)",location:{lat:37.926868,lng:-78.024902}},EAST_US_2:{code:"us-east-2",displayName:"East US (Ohio)",location:{lat:39.9612,lng:-82.9988}},CENTRAL_CANADA:{code:"ca-central-1",displayName:"Canada (Central)",location:{lat:56.130367,lng:-106.346771}},WEST_EU:{code:"eu-west-1",displayName:"West EU (Ireland)",location:{lat:53.3498,lng:-6.2603}},WEST_EU_2:{code:"eu-west-2",displayName:"West Europe (London)",location:{lat:51.507351,lng:-.127758}},WEST_EU_3:{code:"eu-west-3",displayName:"West EU (Paris)",location:{lat:2.352222,lng:48.856613}},CENTRAL_EU:{code:"eu-central-1",displayName:"Central EU (Frankfurt)",location:{lat:50.110924,lng:8.682127}},CENTRAL_EU_2:{code:"eu-central-2",displayName:"Central Europe (Zurich)",location:{lat:47.3744489,lng:8.5410422}},NORTH_EU:{code:"eu-north-1",displayName:"North EU (Stockholm)",location:{lat:59.3251172,lng:18.0710935}},SOUTH_ASIA:{code:"ap-south-1",displayName:"South Asia (Mumbai)",location:{lat:18.9733536,lng:72.8281049}},SOUTHEAST_ASIA:{code:"ap-southeast-1",displayName:"Southeast Asia (Singapore)",location:{lat:1.357107,lng:103.8194992}},NORTHEAST_ASIA:{code:"ap-northeast-1",displayName:"Northeast Asia (Tokyo)",location:{lat:35.6895,lng:139.6917}},NORTHEAST_ASIA_2:{code:"ap-northeast-2",displayName:"Northeast Asia (Seoul)",location:{lat:37.5665,lng:126.978}},OCEANIA:{code:"ap-southeast-2",displayName:"Oceania (Sydney)",location:{lat:-33.8688,lng:151.2093}},SOUTH_AMERICA:{code:"sa-east-1",displayName:"South America (S\xE3o Paulo)",location:{lat:-1.2043218,lng:-47.1583944}}},M=Object.values(S).map(s=>s.code);function U(s){let n=Object.entries(S).map(([d,p])=>[d,te(s,p.location)]).reduce((d,p)=>d===void 0||p[1]<d[1]?p:d,void 0);if(!n)throw new Error("no closest region found");let[g]=n;return S[g]}async function D(){let r=await(await fetch(X)).text(),g=v(r).loc;if(!g)throw new Error("location not found");return g}function H(s){let r=ee[s];if(!r)throw new Error(`unknown location code: ${s}`);return r}function te(s,r){let n=y(r.lat-s.lat),g=y(r.lng-s.lng),d=Math.sin(n/2)*Math.sin(n/2)+Math.cos(y(s.lat))*Math.cos(y(r.lat))*Math.sin(g/2)*Math.sin(g/2),p=2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d));return Q*p}function y(s){return s*(Math.PI/180)}function ve(s){let r=s.platform.apiUrl??"https://api.supabase.com",n;async function g(e,a){let o=await n.POST("/v1/projects/{ref}/database/query",{params:{path:{ref:e}},body:{query:a,read_only:s.readOnly}});return l(o,"Failed to execute SQL query"),o.data}async function d(){return U(H(await D())).code}return ae({name:"supabase",version:b,onInitialize(e){n=j(r,s.platform.accessToken,{"User-Agent":`supabase-mcp/${b} (${e.name}/${e.version})`})},tools:{list_projects:i({description:"Lists all Supabase projects for the user.",parameters:t.object({}),execute:async()=>{let e=await n.GET("/v1/projects");return l(e,"Failed to fetch projects"),e.data}}),get_project:i({description:"Gets details for a Supabase project.",parameters:t.object({id:t.string().describe("The project ID")}),execute:async({id:e})=>{let a=await n.GET("/v1/projects/{ref}",{params:{path:{ref:e}}});return l(a,"Failed to fetch project"),a.data}}),get_cost:i({description:"Gets the cost of creating a new project or branch. Never assume organization as costs can be different for each.",parameters:t.object({type:t.enum(["project","branch"]),organization_id:t.string().describe("The organization ID. Always ask the user.")}),execute:async({type:e,organization_id:a})=>{function o(c){return`The new ${e} will cost $${c.amount} ${c.recurrence}. You must repeat this to the user and confirm their understanding.`}switch(e){case"project":{let c=await f(n,a);return o(c)}case"branch":{let c=E();return o(c)}default:throw new Error(`Unknown cost type: ${e}`)}}}),confirm_cost:i({description:"Ask the user to confirm their understanding of the cost of creating a new project or branch. Call `get_cost` first. Returns a unique ID for this confirmation which should be passed to `create_project` or `create_branch`.",parameters:t.object({type:t.enum(["project","branch"]),recurrence:t.enum(["hourly","monthly"]),amount:t.number()}),execute:async e=>await _(e)}),create_project:i({description:"Creates a new Supabase project. Always ask the user which organization to create the project in. The project can take a few minutes to initialize - use `get_project` to check the status.",parameters:t.object({name:t.string().describe("The name of the project"),region:t.optional(t.enum(M).describe("The region to create the project in. Defaults to the closest region.")),organization_id:t.string(),confirm_cost_id:t.string({required_error:"User must confirm understanding of costs before creating a project."}).describe("The cost confirmation ID. Call `confirm_cost` first.")}),execute:async({name:e,region:a,organization_id:o,confirm_cost_id:c})=>{let T=await f(n,o);if(await _(T)!==c)throw new Error("Cost confirmation ID does not match the expected cost of creating a project.");let h=await n.POST("/v1/projects",{body:{name:e,region:a??await d(),organization_id:o,db_pass:w({length:16,numbers:!0,uppercase:!0,lowercase:!0})}});return l(h,"Failed to create project"),h.data}}),pause_project:i({description:"Pauses a Supabase project.",parameters:t.object({project_id:t.string()}),execute:async({project_id:e})=>{let a=await n.POST("/v1/projects/{ref}/pause",{params:{path:{ref:e}}});l(a,"Failed to pause project")}}),restore_project:i({description:"Restores a Supabase project.",parameters:t.object({project_id:t.string()}),execute:async({project_id:e})=>{let a=await n.POST("/v1/projects/{ref}/restore",{params:{path:{ref:e}},body:{}});l(a,"Failed to restore project")}}),list_organizations:i({description:"Lists all organizations that the user is a member of.",parameters:t.object({}),execute:async()=>{let e=await n.GET("/v1/organizations");return l(e,"Failed to fetch organizations"),e.data}}),get_organization:i({description:"Gets details for an organization. Includes subscription plan.",parameters:t.object({id:t.string().describe("The organization ID")}),execute:async({id:e})=>{let a=await n.GET("/v1/organizations/{slug}",{params:{path:{slug:e}}});return l(a,"Failed to fetch organization"),a.data}}),list_tables:i({description:"Lists all tables in a schema.",parameters:t.object({project_id:t.string(),schemas:t.optional(t.array(t.string())).describe("Optional list of schemas to include. Defaults to all schemas.")}),execute:async({project_id:e,schemas:a})=>{let o=L(a);return await g(e,o)}}),list_extensions:i({description:"Lists all extensions in the database.",parameters:t.object({project_id:t.string()}),execute:async({project_id:e})=>{let a=I();return await g(e,a)}}),list_migrations:i({description:"Lists all migrations in the database.",parameters:t.object({project_id:t.string()}),execute:async({project_id:e})=>{let a=await n.GET("/v1/projects/{ref}/database/migrations",{params:{path:{ref:e}}});return l(a,"Failed to fetch migrations"),a.data}}),apply_migration:i({description:"Applies a migration to the database. Use this when executing DDL operations.",parameters:t.object({project_id:t.string(),name:t.string().describe("The name of the migration in snake_case"),query:t.string().describe("The SQL query to apply")}),execute:async({project_id:e,name:a,query:o})=>{if(s.readOnly)throw new Error("Cannot apply migration in read-only mode.");let c=await n.POST("/v1/projects/{ref}/database/migrations",{params:{path:{ref:e}},body:{name:a,query:o}});return l(c,"Failed to apply migration"),c.data}}),execute_sql:i({description:"Executes raw SQL in the Postgres database. Use `apply_migration` instead for DDL operations.",parameters:t.object({project_id:t.string(),query:t.string().describe("The SQL query to execute")}),execute:async({query:e,project_id:a})=>await g(a,e)}),get_logs:i({description:"Gets logs for a Supabase project by service type. Use this to help debug problems with your app. This will only return logs within the last minute. If the logs you are looking for are older than 1 minute, re-run your test to reproduce them.",parameters:t.object({project_id:t.string(),service:t.enum(["api","branch-action","postgres","edge-function","auth","storage","realtime"]).describe("The service to fetch logs for")}),execute:async({project_id:e,service:a})=>{let o=a==="branch-action"?new Date(Date.now()-3e5):void 0,c=await n.GET("/v1/projects/{ref}/analytics/endpoints/logs.all",{params:{path:{ref:e},query:{iso_timestamp_start:o?.toISOString(),sql:A(a)}}});return l(c,"Failed to fetch logs"),c.data}}),get_project_url:i({description:"Gets the API URL for a project.",parameters:t.object({project_id:t.string()}),execute:async({project_id:e})=>`https://${e}.supabase.co`}),get_anon_key:i({description:"Gets the anonymous API key for a project.",parameters:t.object({project_id:t.string()}),execute:async({project_id:e})=>{let a=await n.GET("/v1/projects/{ref}/api-keys",{params:{path:{ref:e},query:{reveal:!1}}});l(a,"Failed to fetch API keys");let o=a.data?.find(c=>c.name==="anon");if(!o)throw new Error("Anonymous key not found");return o.api_key}}),generate_typescript_types:i({description:"Generates TypeScript types for a project.",parameters:t.object({project_id:t.string()}),execute:async({project_id:e})=>{let a=await n.GET("/v1/projects/{ref}/types/typescript",{params:{path:{ref:e}}});return l(a,"Failed to fetch TypeScript types"),a.data}}),create_branch:i({description:"Creates a development branch on a Supabase project. This will apply all migrations from the main project to a fresh branch database. Note that production data will not carry over. The branch will get its own project_id via the resulting project_ref. Use this ID to execute queries and migrations on the branch.",parameters:t.object({project_id:t.string(),name:t.string().default("develop").describe("Name of the branch to create"),confirm_cost_id:t.string({required_error:"User must confirm understanding of costs before creating a branch."}).describe("The cost confirmation ID. Call `confirm_cost` first.")}),execute:async({project_id:e,name:a,confirm_cost_id:o})=>{let c=E();if(await _(c)!==o)throw new Error("Cost confirmation ID does not match the expected cost of creating a branch.");let u=await n.POST("/v1/projects/{ref}/branches",{params:{path:{ref:e}},body:{branch_name:a}});if(l(u,"Failed to create branch"),u.data.is_default){await n.PATCH("/v1/branches/{branch_id}",{params:{path:{branch_id:u.data.id}},body:{branch_name:"main"}});let h=await n.POST("/v1/projects/{ref}/branches",{params:{path:{ref:e}},body:{branch_name:a}});return l(h,"Failed to create branch"),h.data}return u.data}}),list_branches:i({description:"Lists all development branches of a Supabase project. This will return branch details including status which you can use to check when operations like merge/rebase/reset complete.",parameters:t.object({project_id:t.string()}),execute:async({project_id:e})=>{let a=await n.GET("/v1/projects/{ref}/branches",{params:{path:{ref:e}}});return a.response.status===422?[]:(l(a,"Failed to list branches"),a.data)}}),delete_branch:i({description:"Deletes a development branch.",parameters:t.object({branch_id:t.string()}),execute:async({branch_id:e})=>{let a=await n.DELETE("/v1/branches/{branch_id}",{params:{path:{branch_id:e}}});return l(a,"Failed to delete branch"),a.data}}),merge_branch:i({description:"Merges migrations and edge functions from a development branch to production.",parameters:t.object({branch_id:t.string()}),execute:async({branch_id:e})=>{let a=await n.POST("/v1/branches/{branch_id}/merge",{params:{path:{branch_id:e}},body:{}});return l(a,"Failed to merge branch"),a.data}}),reset_branch:i({description:"Resets migrations of a development branch. Any untracked data or schema changes will be lost.",parameters:t.object({branch_id:t.string(),migration_version:t.string().optional().describe("Reset your development branch to a specific migration version.")}),execute:async({branch_id:e,migration_version:a})=>{let o=await n.POST("/v1/branches/{branch_id}/reset",{params:{path:{branch_id:e}},body:{migration_version:a}});return l(o,"Failed to reset branch"),o.data}}),rebase_branch:i({description:"Rebases a development branch on production. This will effectively run any newer migrations from production onto this branch to help handle migration drift.",parameters:t.object({branch_id:t.string()}),execute:async({branch_id:e})=>{let a=await n.POST("/v1/branches/{branch_id}/push",{params:{path:{branch_id:e}},body:{}});return l(a,"Failed to rebase branch"),a.data}})}})}export{b as a,ve as b};
//# sourceMappingURL=chunk-Q3FEVQB7.js.map