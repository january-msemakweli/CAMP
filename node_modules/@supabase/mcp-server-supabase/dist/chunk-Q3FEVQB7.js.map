{"version":3,"sources":["../package.json","../src/server.ts","../src/logs.ts","../src/management-api/index.ts","../src/password.ts","../src/pg-meta/index.ts","../src/pg-meta/columns.sql","../src/pg-meta/extensions.sql","../src/pg-meta/tables.sql","../src/pricing.ts","../src/util.ts","../src/regions.ts"],"sourcesContent":["{\n  \"name\": \"@supabase/mcp-server-supabase\",\n  \"version\": \"0.3.5\",\n  \"description\": \"MCP server for interacting with Supabase\",\n  \"license\": \"Apache-2.0\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"sideEffects\": false,\n  \"scripts\": {\n    \"build\": \"tsup --clean\",\n    \"prepublishOnly\": \"npm run build\",\n    \"test\": \"vitest\",\n    \"test:e2e\": \"vitest --project e2e\",\n    \"test:unit\": \"vitest --project unit\",\n    \"generate:management-api-types\": \"openapi-typescript https://api.supabase.com/api/v1-json -o ./src/management-api/types.ts\"\n  },\n  \"files\": [\n    \"dist/**/*\"\n  ],\n  \"bin\": {\n    \"mcp-server-supabase\": \"./dist/stdio.js\"\n  },\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/index.js\",\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.cjs\"\n    }\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^1.4.1\",\n    \"@supabase/mcp-utils\": \"0.1.3\",\n    \"common-tags\": \"^1.8.2\",\n    \"openapi-fetch\": \"^0.13.4\",\n    \"zod\": \"^3.24.1\"\n  },\n  \"devDependencies\": {\n    \"@ai-sdk/anthropic\": \"^1.2.9\",\n    \"@electric-sql/pglite\": \"^0.2.17\",\n    \"@total-typescript/tsconfig\": \"^1.0.4\",\n    \"@types/common-tags\": \"^1.8.4\",\n    \"@types/node\": \"^22.8.6\",\n    \"ai\": \"^4.3.4\",\n    \"date-fns\": \"^4.1.0\",\n    \"dotenv\": \"^16.5.0\",\n    \"msw\": \"^2.7.3\",\n    \"nanoid\": \"^5.1.5\",\n    \"openapi-typescript\": \"^7.5.0\",\n    \"openapi-typescript-helpers\": \"^0.0.15\",\n    \"prettier\": \"^3.3.3\",\n    \"tsup\": \"^8.3.5\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5.6.3\",\n    \"vitest\": \"^2.1.9\"\n  }\n}\n","import { createMcpServer, tool } from '@supabase/mcp-utils';\nimport { z } from 'zod';\nimport { version } from '../package.json';\nimport { getLogQuery } from './logs.js';\nimport {\n  assertSuccess,\n  createManagementApiClient,\n  type ManagementApiClient,\n} from './management-api/index.js';\nimport { generatePassword } from './password.js';\nimport { listExtensionsSql, listTablesSql } from './pg-meta/index.js';\nimport type { PostgresExtension, PostgresTable } from './pg-meta/types.js';\nimport { getBranchCost, getNextProjectCost, type Cost } from './pricing.js';\nimport {\n  AWS_REGION_CODES,\n  getClosestAwsRegion,\n  getCountryCode,\n  getCountryCoordinates,\n} from './regions.js';\nimport { hashObject } from './util.js';\n\nexport type SupabasePlatformOptions = {\n  /**\n   * The access token for the Supabase Management API.\n   */\n  accessToken: string;\n\n  /**\n   * The API URL for the Supabase Management API.\n   */\n  apiUrl?: string;\n};\n\nexport type SupabaseMcpServerOptions = {\n  /**\n   * Platform options for Supabase.\n   */\n  platform: SupabasePlatformOptions;\n\n  /**\n   * Executes database queries in read-only mode if true.\n   */\n  readOnly?: boolean;\n};\n\n/**\n * Creates an MCP server for interacting with Supabase.\n */\nexport function createSupabaseMcpServer(options: SupabaseMcpServerOptions) {\n  const managementApiUrl =\n    options.platform.apiUrl ?? 'https://api.supabase.com';\n\n  let managementApiClient: ManagementApiClient;\n\n  async function executeSql<T>(projectId: string, query: string): Promise<T[]> {\n    const response = await managementApiClient.POST(\n      '/v1/projects/{ref}/database/query',\n      {\n        params: {\n          path: {\n            ref: projectId,\n          },\n        },\n        body: {\n          query,\n          read_only: options.readOnly,\n        },\n      }\n    );\n\n    assertSuccess(response, 'Failed to execute SQL query');\n\n    return response.data as unknown as T[];\n  }\n\n  async function getClosestRegion() {\n    return getClosestAwsRegion(getCountryCoordinates(await getCountryCode()))\n      .code;\n  }\n\n  const server = createMcpServer({\n    name: 'supabase',\n    version,\n    onInitialize(clientInfo) {\n      managementApiClient = createManagementApiClient(\n        managementApiUrl,\n        options.platform.accessToken,\n        {\n          'User-Agent': `supabase-mcp/${version} (${clientInfo.name}/${clientInfo.version})`,\n        }\n      );\n    },\n\n    // Note: tools are intentionally snake_case to align better with most MCP clients\n    tools: {\n      list_projects: tool({\n        description: 'Lists all Supabase projects for the user.',\n        parameters: z.object({}),\n        execute: async () => {\n          const response = await managementApiClient.GET('/v1/projects');\n\n          assertSuccess(response, 'Failed to fetch projects');\n\n          return response.data;\n        },\n      }),\n      get_project: tool({\n        description: 'Gets details for a Supabase project.',\n        parameters: z.object({\n          id: z.string().describe('The project ID'),\n        }),\n        execute: async ({ id }) => {\n          const response = await managementApiClient.GET('/v1/projects/{ref}', {\n            params: {\n              path: {\n                ref: id,\n              },\n            },\n          });\n          assertSuccess(response, 'Failed to fetch project');\n          return response.data;\n        },\n      }),\n      get_cost: tool({\n        description:\n          'Gets the cost of creating a new project or branch. Never assume organization as costs can be different for each.',\n        parameters: z.object({\n          type: z.enum(['project', 'branch']),\n          organization_id: z\n            .string()\n            .describe('The organization ID. Always ask the user.'),\n        }),\n        execute: async ({ type, organization_id }) => {\n          function generateResponse(cost: Cost) {\n            return `The new ${type} will cost $${cost.amount} ${cost.recurrence}. You must repeat this to the user and confirm their understanding.`;\n          }\n          switch (type) {\n            case 'project': {\n              const cost = await getNextProjectCost(\n                managementApiClient,\n                organization_id\n              );\n              return generateResponse(cost);\n            }\n            case 'branch': {\n              const cost = getBranchCost();\n              return generateResponse(cost);\n            }\n            default:\n              throw new Error(`Unknown cost type: ${type}`);\n          }\n        },\n      }),\n      confirm_cost: tool({\n        description:\n          'Ask the user to confirm their understanding of the cost of creating a new project or branch. Call `get_cost` first. Returns a unique ID for this confirmation which should be passed to `create_project` or `create_branch`.',\n        parameters: z.object({\n          type: z.enum(['project', 'branch']),\n          recurrence: z.enum(['hourly', 'monthly']),\n          amount: z.number(),\n        }),\n        execute: async (cost) => {\n          return await hashObject(cost);\n        },\n      }),\n      create_project: tool({\n        description:\n          'Creates a new Supabase project. Always ask the user which organization to create the project in. The project can take a few minutes to initialize - use `get_project` to check the status.',\n        parameters: z.object({\n          name: z.string().describe('The name of the project'),\n          region: z.optional(\n            z\n              .enum(AWS_REGION_CODES)\n              .describe(\n                'The region to create the project in. Defaults to the closest region.'\n              )\n          ),\n          organization_id: z.string(),\n          confirm_cost_id: z\n            .string({\n              required_error:\n                'User must confirm understanding of costs before creating a project.',\n            })\n            .describe('The cost confirmation ID. Call `confirm_cost` first.'),\n        }),\n        execute: async ({ name, region, organization_id, confirm_cost_id }) => {\n          const cost = await getNextProjectCost(\n            managementApiClient,\n            organization_id\n          );\n          const costHash = await hashObject(cost);\n          if (costHash !== confirm_cost_id) {\n            throw new Error(\n              'Cost confirmation ID does not match the expected cost of creating a project.'\n            );\n          }\n\n          const response = await managementApiClient.POST('/v1/projects', {\n            body: {\n              name,\n              region: region ?? (await getClosestRegion()),\n              organization_id,\n              db_pass: generatePassword({\n                length: 16,\n                numbers: true,\n                uppercase: true,\n                lowercase: true,\n              }),\n            },\n          });\n\n          assertSuccess(response, 'Failed to create project');\n\n          return response.data;\n        },\n      }),\n      pause_project: tool({\n        description: 'Pauses a Supabase project.',\n        parameters: z.object({\n          project_id: z.string(),\n        }),\n        execute: async ({ project_id }) => {\n          const response = await managementApiClient.POST(\n            '/v1/projects/{ref}/pause',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to pause project');\n        },\n      }),\n      restore_project: tool({\n        description: 'Restores a Supabase project.',\n        parameters: z.object({\n          project_id: z.string(),\n        }),\n        execute: async ({ project_id }) => {\n          const response = await managementApiClient.POST(\n            '/v1/projects/{ref}/restore',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n              },\n              body: {},\n            }\n          );\n\n          assertSuccess(response, 'Failed to restore project');\n        },\n      }),\n      list_organizations: tool({\n        description: 'Lists all organizations that the user is a member of.',\n        parameters: z.object({}),\n        execute: async () => {\n          const response = await managementApiClient.GET('/v1/organizations');\n\n          assertSuccess(response, 'Failed to fetch organizations');\n\n          return response.data;\n        },\n      }),\n      get_organization: tool({\n        description:\n          'Gets details for an organization. Includes subscription plan.',\n        parameters: z.object({\n          id: z.string().describe('The organization ID'),\n        }),\n        execute: async ({ id: organizationId }) => {\n          const response = await managementApiClient.GET(\n            '/v1/organizations/{slug}',\n            {\n              params: {\n                path: {\n                  slug: organizationId,\n                },\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to fetch organization');\n\n          return response.data;\n        },\n      }),\n      list_tables: tool({\n        description: 'Lists all tables in a schema.',\n        parameters: z.object({\n          project_id: z.string(),\n          schemas: z\n            .optional(z.array(z.string()))\n            .describe(\n              'Optional list of schemas to include. Defaults to all schemas.'\n            ),\n        }),\n        execute: async ({ project_id, schemas }) => {\n          const sql = listTablesSql(schemas);\n          const data = await executeSql<PostgresTable>(project_id, sql);\n          return data;\n        },\n      }),\n      list_extensions: tool({\n        description: 'Lists all extensions in the database.',\n        parameters: z.object({\n          project_id: z.string(),\n        }),\n        execute: async ({ project_id }) => {\n          const sql = listExtensionsSql();\n          const data = await executeSql<PostgresExtension>(project_id, sql);\n          return data;\n        },\n      }),\n      list_migrations: tool({\n        description: 'Lists all migrations in the database.',\n        parameters: z.object({\n          project_id: z.string(),\n        }),\n        execute: async ({ project_id }) => {\n          const response = await managementApiClient.GET(\n            '/v1/projects/{ref}/database/migrations',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to fetch migrations');\n\n          return response.data;\n        },\n      }),\n      apply_migration: tool({\n        description:\n          'Applies a migration to the database. Use this when executing DDL operations.',\n        parameters: z.object({\n          project_id: z.string(),\n          name: z.string().describe('The name of the migration in snake_case'),\n          query: z.string().describe('The SQL query to apply'),\n        }),\n        execute: async ({ project_id, name, query }) => {\n          if (options.readOnly) {\n            throw new Error('Cannot apply migration in read-only mode.');\n          }\n\n          const response = await managementApiClient.POST(\n            '/v1/projects/{ref}/database/migrations',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n              },\n              body: {\n                name,\n                query,\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to apply migration');\n\n          return response.data;\n        },\n      }),\n      execute_sql: tool({\n        description:\n          'Executes raw SQL in the Postgres database. Use `apply_migration` instead for DDL operations.',\n        parameters: z.object({\n          project_id: z.string(),\n          query: z.string().describe('The SQL query to execute'),\n        }),\n        execute: async ({ query, project_id }) => {\n          return await executeSql(project_id, query);\n        },\n      }),\n      get_logs: tool({\n        description:\n          'Gets logs for a Supabase project by service type. Use this to help debug problems with your app. This will only return logs within the last minute. If the logs you are looking for are older than 1 minute, re-run your test to reproduce them.',\n        parameters: z.object({\n          project_id: z.string(),\n          service: z\n            .enum([\n              'api',\n              'branch-action',\n              'postgres',\n              'edge-function',\n              'auth',\n              'storage',\n              'realtime',\n            ])\n            .describe('The service to fetch logs for'),\n        }),\n        execute: async ({ project_id, service }) => {\n          // Omitting start and end time defaults to the last minute.\n          // But since branch actions are async, we need to wait longer\n          // for jobs to be scheduled and run to completion.\n          const timestamp =\n            service === 'branch-action'\n              ? new Date(Date.now() - 5 * 60 * 1000)\n              : undefined;\n          const response = await managementApiClient.GET(\n            '/v1/projects/{ref}/analytics/endpoints/logs.all',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n                query: {\n                  iso_timestamp_start: timestamp?.toISOString(),\n                  sql: getLogQuery(service),\n                },\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to fetch logs');\n\n          return response.data;\n        },\n      }),\n\n      get_project_url: tool({\n        description: 'Gets the API URL for a project.',\n        parameters: z.object({\n          project_id: z.string(),\n        }),\n        execute: async ({ project_id }) => {\n          return `https://${project_id}.supabase.co`;\n        },\n      }),\n      get_anon_key: tool({\n        description: 'Gets the anonymous API key for a project.',\n        parameters: z.object({\n          project_id: z.string(),\n        }),\n        execute: async ({ project_id }) => {\n          const response = await managementApiClient.GET(\n            '/v1/projects/{ref}/api-keys',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n                query: {\n                  reveal: false,\n                },\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to fetch API keys');\n\n          const anonKey = response.data?.find((key) => key.name === 'anon');\n\n          if (!anonKey) {\n            throw new Error('Anonymous key not found');\n          }\n\n          return anonKey.api_key;\n        },\n      }),\n      generate_typescript_types: tool({\n        description: 'Generates TypeScript types for a project.',\n        parameters: z.object({\n          project_id: z.string(),\n        }),\n        execute: async ({ project_id }) => {\n          const response = await managementApiClient.GET(\n            '/v1/projects/{ref}/types/typescript',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to fetch TypeScript types');\n\n          return response.data;\n        },\n      }),\n\n      // Experimental features\n      create_branch: tool({\n        description:\n          'Creates a development branch on a Supabase project. This will apply all migrations from the main project to a fresh branch database. Note that production data will not carry over. The branch will get its own project_id via the resulting project_ref. Use this ID to execute queries and migrations on the branch.',\n        parameters: z.object({\n          project_id: z.string(),\n          name: z\n            .string()\n            .default('develop')\n            .describe('Name of the branch to create'),\n          confirm_cost_id: z\n            .string({\n              required_error:\n                'User must confirm understanding of costs before creating a branch.',\n            })\n            .describe('The cost confirmation ID. Call `confirm_cost` first.'),\n        }),\n        execute: async ({ project_id, name, confirm_cost_id }) => {\n          const cost = getBranchCost();\n          const costHash = await hashObject(cost);\n          if (costHash !== confirm_cost_id) {\n            throw new Error(\n              'Cost confirmation ID does not match the expected cost of creating a branch.'\n            );\n          }\n\n          const createBranchResponse = await managementApiClient.POST(\n            '/v1/projects/{ref}/branches',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n              },\n              body: {\n                branch_name: name,\n              },\n            }\n          );\n\n          assertSuccess(createBranchResponse, 'Failed to create branch');\n\n          // Creating a default branch means we just enabled branching\n          // TODO: move this logic to API eventually.\n          if (createBranchResponse.data.is_default) {\n            await managementApiClient.PATCH('/v1/branches/{branch_id}', {\n              params: {\n                path: {\n                  branch_id: createBranchResponse.data.id,\n                },\n              },\n              body: {\n                branch_name: 'main',\n              },\n            });\n\n            const response = await managementApiClient.POST(\n              '/v1/projects/{ref}/branches',\n              {\n                params: {\n                  path: {\n                    ref: project_id,\n                  },\n                },\n                body: {\n                  branch_name: name,\n                },\n              }\n            );\n\n            assertSuccess(response, 'Failed to create branch');\n\n            return response.data;\n          }\n\n          return createBranchResponse.data;\n        },\n      }),\n      list_branches: tool({\n        description:\n          'Lists all development branches of a Supabase project. This will return branch details including status which you can use to check when operations like merge/rebase/reset complete.',\n        parameters: z.object({\n          project_id: z.string(),\n        }),\n        execute: async ({ project_id }) => {\n          const response = await managementApiClient.GET(\n            '/v1/projects/{ref}/branches',\n            {\n              params: {\n                path: {\n                  ref: project_id,\n                },\n              },\n            }\n          );\n\n          // There are no branches if branching is disabled\n          if (response.response.status === 422) return [];\n          assertSuccess(response, 'Failed to list branches');\n\n          return response.data;\n        },\n      }),\n      delete_branch: tool({\n        description: 'Deletes a development branch.',\n        parameters: z.object({\n          branch_id: z.string(),\n        }),\n        execute: async ({ branch_id }) => {\n          const response = await managementApiClient.DELETE(\n            '/v1/branches/{branch_id}',\n            {\n              params: {\n                path: {\n                  branch_id,\n                },\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to delete branch');\n\n          return response.data;\n        },\n      }),\n      merge_branch: tool({\n        description:\n          'Merges migrations and edge functions from a development branch to production.',\n        parameters: z.object({\n          branch_id: z.string(),\n        }),\n        execute: async ({ branch_id }) => {\n          const response = await managementApiClient.POST(\n            '/v1/branches/{branch_id}/merge',\n            {\n              params: {\n                path: {\n                  branch_id,\n                },\n              },\n              body: {},\n            }\n          );\n\n          assertSuccess(response, 'Failed to merge branch');\n\n          return response.data;\n        },\n      }),\n      reset_branch: tool({\n        description:\n          'Resets migrations of a development branch. Any untracked data or schema changes will be lost.',\n        parameters: z.object({\n          branch_id: z.string(),\n          migration_version: z\n            .string()\n            .optional()\n            .describe(\n              'Reset your development branch to a specific migration version.'\n            ),\n        }),\n        execute: async ({ branch_id, migration_version }) => {\n          const response = await managementApiClient.POST(\n            '/v1/branches/{branch_id}/reset',\n            {\n              params: {\n                path: {\n                  branch_id,\n                },\n              },\n              body: {\n                migration_version,\n              },\n            }\n          );\n\n          assertSuccess(response, 'Failed to reset branch');\n\n          return response.data;\n        },\n      }),\n      rebase_branch: tool({\n        description:\n          'Rebases a development branch on production. This will effectively run any newer migrations from production onto this branch to help handle migration drift.',\n        parameters: z.object({\n          branch_id: z.string(),\n        }),\n        execute: async ({ branch_id }) => {\n          const response = await managementApiClient.POST(\n            '/v1/branches/{branch_id}/push',\n            {\n              params: {\n                path: {\n                  branch_id,\n                },\n              },\n              body: {},\n            }\n          );\n\n          assertSuccess(response, 'Failed to rebase branch');\n\n          return response.data;\n        },\n      }),\n    },\n  });\n\n  return server;\n}\n","import { stripIndent } from 'common-tags';\n\nexport function getLogQuery(\n  service:\n    | 'api'\n    | 'branch-action'\n    | 'postgres'\n    | 'edge-function'\n    | 'auth'\n    | 'storage'\n    | 'realtime',\n  limit: number = 100\n) {\n  switch (service) {\n    case 'api':\n      return stripIndent`\n        select id, identifier, timestamp, event_message, request.method, request.path, response.status_code\n        from edge_logs\n        cross join unnest(metadata) as m\n        cross join unnest(m.request) as request\n        cross join unnest(m.response) as response\n        order by timestamp desc\n        limit ${limit}\n      `;\n    case 'branch-action':\n      return stripIndent`\n        select workflow_run, workflow_run_logs.timestamp, id, event_message from workflow_run_logs\n        order by timestamp desc\n        limit ${limit}\n      `;\n    case 'postgres':\n      return stripIndent`\n        select identifier, postgres_logs.timestamp, id, event_message, parsed.error_severity from postgres_logs\n        cross join unnest(metadata) as m\n        cross join unnest(m.parsed) as parsed\n        order by timestamp desc\n        limit ${limit}\n      `;\n    case 'edge-function':\n      return stripIndent`\n        select id, function_edge_logs.timestamp, event_message, response.status_code, request.method, m.function_id, m.execution_time_ms, m.deployment_id, m.version from function_edge_logs\n        cross join unnest(metadata) as m\n        cross join unnest(m.response) as response\n        cross join unnest(m.request) as request\n        order by timestamp desc\n        limit ${limit}\n      `;\n    case 'auth':\n      return stripIndent`\n        select id, auth_logs.timestamp, event_message, metadata.level, metadata.status, metadata.path, metadata.msg as msg, metadata.error from auth_logs\n        cross join unnest(metadata) as metadata\n        order by timestamp desc\n        limit ${limit}\n      `;\n    case 'storage':\n      return stripIndent`\n        select id, storage_logs.timestamp, event_message from storage_logs\n        order by timestamp desc\n        limit ${limit}\n      `;\n    case 'realtime':\n      return stripIndent`\n        select id, realtime_logs.timestamp, event_message from realtime_logs\n        order by timestamp desc\n        limit ${limit}\n      `;\n    default:\n      throw new Error(`unsupported log service type: ${service}`);\n  }\n}\n","import createClient, {\n  type Client,\n  type FetchResponse,\n  type ParseAsResponse,\n} from 'openapi-fetch';\nimport type {\n  MediaType,\n  ResponseObjectMap,\n  SuccessResponse,\n} from 'openapi-typescript-helpers';\nimport { z } from 'zod';\nimport type { paths } from './types.js';\n\nexport function createManagementApiClient(\n  baseUrl: string,\n  accessToken: string,\n  headers: Record<string, string> = {}\n) {\n  return createClient<paths>({\n    baseUrl,\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n      ...headers,\n    },\n  });\n}\n\nexport type ManagementApiClient = Client<paths>;\n\nexport type SuccessResponseType<\n  T extends Record<string | number, any>,\n  Options,\n  Media extends MediaType,\n> = {\n  data: ParseAsResponse<SuccessResponse<ResponseObjectMap<T>, Media>, Options>;\n  error?: never;\n  response: Response;\n};\n\nconst errorSchema = z.object({\n  message: z.string(),\n});\n\nexport function assertSuccess<\n  T extends Record<string | number, any>,\n  Options,\n  Media extends MediaType,\n>(\n  response: FetchResponse<T, Options, Media>,\n  fallbackMessage: string\n): asserts response is SuccessResponseType<T, Options, Media> {\n  if ('error' in response) {\n    if (response.response.status === 401) {\n      throw new Error(\n        'Unauthorized. Please provide a valid access token to the MCP server via the --access-token flag.'\n      );\n    }\n\n    const { data: errorContent } = errorSchema.safeParse(response.error);\n\n    if (errorContent) {\n      throw new Error(errorContent.message);\n    }\n\n    throw new Error(fallbackMessage);\n  }\n}\n","const UPPERCASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst LOWERCASE_CHARS = 'abcdefghijklmnopqrstuvwxyz';\nconst NUMBER_CHARS = '0123456789';\nconst SYMBOL_CHARS = '!@#$%^&*()_+~`|}{[]:;?><,./-=';\n\nexport type GeneratePasswordOptions = {\n  length?: number;\n  numbers?: boolean;\n  uppercase?: boolean;\n  lowercase?: boolean;\n  symbols?: boolean;\n};\n\n/**\n * Generates a cryptographically secure random password.\n *\n * @returns The generated password\n */\nexport const generatePassword = ({\n  length = 10,\n  numbers = false,\n  symbols = false,\n  uppercase = true,\n  lowercase = true,\n} = {}) => {\n  // Build the character set based on options\n  let chars = '';\n  if (uppercase) {\n    chars += UPPERCASE_CHARS;\n  }\n  if (lowercase) {\n    chars += LOWERCASE_CHARS;\n  }\n  if (numbers) {\n    chars += NUMBER_CHARS;\n  }\n  if (symbols) {\n    chars += SYMBOL_CHARS;\n  }\n\n  if (chars.length === 0) {\n    throw new Error('at least one character set must be selected');\n  }\n\n  const randomValues = new Uint32Array(length);\n  crypto.getRandomValues(randomValues);\n\n  // Map random values to our character set\n  let password = '';\n  for (let i = 0; i < length; i++) {\n    const randomIndex = randomValues[i]! % chars.length;\n    password += chars.charAt(randomIndex);\n  }\n\n  return password;\n};\n","import { stripIndent } from 'common-tags';\nimport columnsSql from './columns.sql';\nimport extensionsSql from './extensions.sql';\nimport tablesSql from './tables.sql';\n\nexport const DEFAULT_SYSTEM_SCHEMAS = [\n  'information_schema',\n  'pg_catalog',\n  'pg_toast',\n];\n\n/**\n * Generates the SQL query to list tables in the database.\n */\nexport function listTablesSql(schemas: string[] = []) {\n  let sql = stripIndent`\n    with\n      tables as (${tablesSql}),\n      columns as (${columnsSql})\n    select\n      *,\n      ${coalesceRowsToArray('columns', 'columns.table_id = tables.id')}\n    from tables\n  `;\n\n  if (schemas.length > 0) {\n    sql += `  where schema in (${schemas.map((s) => `'${s}'`).join(',')})`;\n  } else {\n    sql += `  where schema not in (${DEFAULT_SYSTEM_SCHEMAS.map((s) => `'${s}'`).join(',')})`;\n  }\n\n  return sql;\n}\n\n/**\n * Generates the SQL query to list all extensions in the database.\n */\nexport function listExtensionsSql() {\n  return extensionsSql;\n}\n\n/**\n * Generates a SQL segment that coalesces rows into an array of JSON objects.\n */\nexport const coalesceRowsToArray = (source: string, filter: string) => {\n  return stripIndent`\n    COALESCE(\n      (\n        SELECT\n          array_agg(row_to_json(${source})) FILTER (WHERE ${filter})\n        FROM\n          ${source}\n      ),\n      '{}'\n    ) AS ${source}\n  `;\n};\n","-- Adapted from information_schema.columns\n\nSELECT\n  c.oid :: int8 AS table_id,\n  nc.nspname AS schema,\n  c.relname AS table,\n  (c.oid || '.' || a.attnum) AS id,\n  a.attnum AS ordinal_position,\n  a.attname AS name,\n  CASE\n    WHEN a.atthasdef THEN pg_get_expr(ad.adbin, ad.adrelid)\n    ELSE NULL\n  END AS default_value,\n  CASE\n    WHEN t.typtype = 'd' THEN CASE\n      WHEN bt.typelem <> 0 :: oid\n      AND bt.typlen = -1 THEN 'ARRAY'\n      WHEN nbt.nspname = 'pg_catalog' THEN format_type(t.typbasetype, NULL)\n      ELSE 'USER-DEFINED'\n    END\n    ELSE CASE\n      WHEN t.typelem <> 0 :: oid\n      AND t.typlen = -1 THEN 'ARRAY'\n      WHEN nt.nspname = 'pg_catalog' THEN format_type(a.atttypid, NULL)\n      ELSE 'USER-DEFINED'\n    END\n  END AS data_type,\n  COALESCE(bt.typname, t.typname) AS format,\n  a.attidentity IN ('a', 'd') AS is_identity,\n  CASE\n    a.attidentity\n    WHEN 'a' THEN 'ALWAYS'\n    WHEN 'd' THEN 'BY DEFAULT'\n    ELSE NULL\n  END AS identity_generation,\n  a.attgenerated IN ('s') AS is_generated,\n  NOT (\n    a.attnotnull\n    OR t.typtype = 'd' AND t.typnotnull\n  ) AS is_nullable,\n  (\n    c.relkind IN ('r', 'p')\n    OR c.relkind IN ('v', 'f') AND pg_column_is_updatable(c.oid, a.attnum, FALSE)\n  ) AS is_updatable,\n  uniques.table_id IS NOT NULL AS is_unique,\n  check_constraints.definition AS \"check\",\n  array_to_json(\n    array(\n      SELECT\n        enumlabel\n      FROM\n        pg_catalog.pg_enum enums\n      WHERE\n        enums.enumtypid = coalesce(bt.oid, t.oid)\n        OR enums.enumtypid = coalesce(bt.typelem, t.typelem)\n      ORDER BY\n        enums.enumsortorder\n    )\n  ) AS enums,\n  col_description(c.oid, a.attnum) AS comment\nFROM\n  pg_attribute a\n  LEFT JOIN pg_attrdef ad ON a.attrelid = ad.adrelid\n  AND a.attnum = ad.adnum\n  JOIN (\n    pg_class c\n    JOIN pg_namespace nc ON c.relnamespace = nc.oid\n  ) ON a.attrelid = c.oid\n  JOIN (\n    pg_type t\n    JOIN pg_namespace nt ON t.typnamespace = nt.oid\n  ) ON a.atttypid = t.oid\n  LEFT JOIN (\n    pg_type bt\n    JOIN pg_namespace nbt ON bt.typnamespace = nbt.oid\n  ) ON t.typtype = 'd'\n  AND t.typbasetype = bt.oid\n  LEFT JOIN (\n    SELECT DISTINCT ON (table_id, ordinal_position)\n      conrelid AS table_id,\n      conkey[1] AS ordinal_position\n    FROM pg_catalog.pg_constraint\n    WHERE contype = 'u' AND cardinality(conkey) = 1\n  ) AS uniques ON uniques.table_id = c.oid AND uniques.ordinal_position = a.attnum\n  LEFT JOIN (\n    -- We only select the first column check\n    SELECT DISTINCT ON (table_id, ordinal_position)\n      conrelid AS table_id,\n      conkey[1] AS ordinal_position,\n      substring(\n        pg_get_constraintdef(pg_constraint.oid, true),\n        8,\n        length(pg_get_constraintdef(pg_constraint.oid, true)) - 8\n      ) AS \"definition\"\n    FROM pg_constraint\n    WHERE contype = 'c' AND cardinality(conkey) = 1\n    ORDER BY table_id, ordinal_position, oid asc\n  ) AS check_constraints ON check_constraints.table_id = c.oid AND check_constraints.ordinal_position = a.attnum\nWHERE\n  NOT pg_is_other_temp_schema(nc.oid)\n  AND a.attnum > 0\n  AND NOT a.attisdropped\n  AND (c.relkind IN ('r', 'v', 'm', 'f', 'p'))\n  AND (\n    pg_has_role(c.relowner, 'USAGE')\n    OR has_column_privilege(\n      c.oid,\n      a.attnum,\n      'SELECT, INSERT, UPDATE, REFERENCES'\n    )\n  )\n","SELECT\n  e.name,\n  n.nspname AS schema,\n  e.default_version,\n  x.extversion AS installed_version,\n  e.comment\nFROM\n  pg_available_extensions() e(name, default_version, comment)\n  LEFT JOIN pg_extension x ON e.name = x.extname\n  LEFT JOIN pg_namespace n ON x.extnamespace = n.oid\n","SELECT\n  c.oid :: int8 AS id,\n  nc.nspname AS schema,\n  c.relname AS name,\n  c.relrowsecurity AS rls_enabled,\n  c.relforcerowsecurity AS rls_forced,\n  CASE\n    WHEN c.relreplident = 'd' THEN 'DEFAULT'\n    WHEN c.relreplident = 'i' THEN 'INDEX'\n    WHEN c.relreplident = 'f' THEN 'FULL'\n    ELSE 'NOTHING'\n  END AS replica_identity,\n  pg_total_relation_size(format('%I.%I', nc.nspname, c.relname)) :: int8 AS bytes,\n  pg_size_pretty(\n    pg_total_relation_size(format('%I.%I', nc.nspname, c.relname))\n  ) AS size,\n  pg_stat_get_live_tuples(c.oid) AS live_rows_estimate,\n  pg_stat_get_dead_tuples(c.oid) AS dead_rows_estimate,\n  obj_description(c.oid) AS comment,\n  coalesce(pk.primary_keys, '[]') as primary_keys,\n  coalesce(\n    jsonb_agg(relationships) filter (where relationships is not null),\n    '[]'\n  ) as relationships\nFROM\n  pg_namespace nc\n  JOIN pg_class c ON nc.oid = c.relnamespace\n  left join (\n    select\n      table_id,\n      jsonb_agg(_pk.*) as primary_keys\n    from (\n      select\n        n.nspname as schema,\n        c.relname as table_name,\n        a.attname as name,\n        c.oid :: int8 as table_id\n      from\n        pg_index i,\n        pg_class c,\n        pg_attribute a,\n        pg_namespace n\n      where\n        i.indrelid = c.oid\n        and c.relnamespace = n.oid\n        and a.attrelid = c.oid\n        and a.attnum = any (i.indkey)\n        and i.indisprimary\n    ) as _pk\n    group by table_id\n  ) as pk\n  on pk.table_id = c.oid\n  left join (\n    select\n      c.oid :: int8 as id,\n      c.conname as constraint_name,\n      nsa.nspname as source_schema,\n      csa.relname as source_table_name,\n      sa.attname as source_column_name,\n      nta.nspname as target_table_schema,\n      cta.relname as target_table_name,\n      ta.attname as target_column_name\n    from\n      pg_constraint c\n    join (\n      pg_attribute sa\n      join pg_class csa on sa.attrelid = csa.oid\n      join pg_namespace nsa on csa.relnamespace = nsa.oid\n    ) on sa.attrelid = c.conrelid and sa.attnum = any (c.conkey)\n    join (\n      pg_attribute ta\n      join pg_class cta on ta.attrelid = cta.oid\n      join pg_namespace nta on cta.relnamespace = nta.oid\n    ) on ta.attrelid = c.confrelid and ta.attnum = any (c.confkey)\n    where\n      c.contype = 'f'\n  ) as relationships\n  on (relationships.source_schema = nc.nspname and relationships.source_table_name = c.relname)\n  or (relationships.target_table_schema = nc.nspname and relationships.target_table_name = c.relname)\nWHERE\n  c.relkind IN ('r', 'p')\n  AND NOT pg_is_other_temp_schema(nc.oid)\n  AND (\n    pg_has_role(c.relowner, 'USAGE')\n    OR has_table_privilege(\n      c.oid,\n      'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'\n    )\n    OR has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES')\n  )\ngroup by\n  c.oid,\n  c.relname,\n  c.relrowsecurity,\n  c.relforcerowsecurity,\n  c.relreplident,\n  nc.nspname,\n  pk.primary_keys\n","import {\n  assertSuccess,\n  type ManagementApiClient,\n} from './management-api/index.js';\n\nexport const PROJECT_COST_MONTHLY = 10;\nexport const BRANCH_COST_HOURLY = 0.01344;\n\nexport type ProjectCost = {\n  type: 'project';\n  recurrence: 'monthly';\n  amount: number;\n};\n\nexport type BranchCost = {\n  type: 'branch';\n  recurrence: 'hourly';\n  amount: number;\n};\n\nexport type Cost = ProjectCost | BranchCost;\n\n/**\n * Gets the cost of the next project in an organization.\n */\nexport async function getNextProjectCost(\n  managementApiClient: ManagementApiClient,\n  orgId: string\n): Promise<Cost> {\n  const orgResponse = await managementApiClient.GET(\n    '/v1/organizations/{slug}',\n    {\n      params: {\n        path: {\n          slug: orgId,\n        },\n      },\n    }\n  );\n\n  assertSuccess(orgResponse, 'Failed to fetch organization');\n\n  const projectsResponse = await managementApiClient.GET('/v1/projects');\n\n  assertSuccess(projectsResponse, 'Failed to fetch projects');\n\n  const org = orgResponse.data;\n  const activeProjects = projectsResponse.data.filter(\n    (project) =>\n      project.organization_id === orgId &&\n      !['INACTIVE', 'GOING_DOWN', 'REMOVED'].includes(project.status)\n  );\n\n  let amount = 0;\n\n  if (org.plan !== 'free') {\n    // If the organization is on a paid plan, the first project is included\n    if (activeProjects.length > 0) {\n      amount = PROJECT_COST_MONTHLY;\n    }\n  }\n\n  return { type: 'project', recurrence: 'monthly', amount };\n}\n\n/**\n * Gets the cost for a database branch.\n */\nexport function getBranchCost(): Cost {\n  return { type: 'branch', recurrence: 'hourly', amount: BRANCH_COST_HOURLY };\n}\n","export type ValueOf<T> = T[keyof T];\n\n// UnionToIntersection<A | B> = A & B\nexport type UnionToIntersection<U> = (\n  U extends unknown ? (arg: U) => 0 : never\n) extends (arg: infer I) => 0\n  ? I\n  : never;\n\n// LastInUnion<A | B> = B\nexport type LastInUnion<U> =\n  UnionToIntersection<U extends unknown ? (x: U) => 0 : never> extends (\n    x: infer L\n  ) => 0\n    ? L\n    : never;\n\n// UnionToTuple<A, B> = [A, B]\nexport type UnionToTuple<T, Last = LastInUnion<T>> = [T] extends [never]\n  ? []\n  : [Last, ...UnionToTuple<Exclude<T, Last>>];\n\n/**\n * Parses a key-value string into an object.\n *\n * @returns An object representing the key-value pairs\n *\n * @example\n * const result = parseKeyValueList(\"key1=value1\\nkey2=value2\");\n * console.log(result); // { key1: \"value1\", key2: \"value2\" }\n */\nexport function parseKeyValueList(data: string): { [key: string]: string } {\n  return Object.fromEntries(\n    data\n      .split('\\n')\n      .map((item) => item.split(/=(.*)/)) // split only on the first '='\n      .filter(([key]) => key) // filter out empty keys\n      .map(([key, value]) => [key, value ?? '']) // ensure value is not undefined\n  );\n}\n\n/**\n * Creates a unique hash from a JavaScript object.\n * @param obj - The object to hash\n * @param length - Optional length to truncate the hash (default: full length)\n */\nexport async function hashObject(\n  obj: Record<string, any>,\n  length?: number\n): Promise<string> {\n  // Sort object keys to ensure consistent output regardless of original key order\n  const str = JSON.stringify(obj, (_, value) => {\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      return Object.keys(value)\n        .sort()\n        .reduce<Record<string, any>>((result, key) => {\n          result[key] = value[key];\n          return result;\n        }, {});\n    }\n    return value;\n  });\n\n  const buffer = await crypto.subtle.digest(\n    'SHA-256',\n    new TextEncoder().encode(str)\n  );\n\n  // Convert to base64\n  const base64Hash = btoa(String.fromCharCode(...new Uint8Array(buffer)));\n  return base64Hash.slice(0, length);\n}\n","import { parseKeyValueList, type UnionToTuple, type ValueOf } from './util.js';\n\nexport type AwsRegion = {\n  code: string;\n  displayName: string;\n  location: Location;\n};\n\nexport type Location = {\n  lat: number;\n  lng: number;\n};\n\nexport const EARTH_RADIUS = 6371; // in kilometers\nexport const TRACE_URL = 'https://www.cloudflare.com/cdn-cgi/trace';\n\nexport const COUNTRY_COORDINATES = {\n  AF: { lat: 33, lng: 65 },\n  AX: { lat: 60.116667, lng: 19.9 },\n  AL: { lat: 41, lng: 20 },\n  DZ: { lat: 28, lng: 3 },\n  AS: { lat: -14.3333, lng: -170 },\n  AD: { lat: 42.5, lng: 1.6 },\n  AO: { lat: -12.5, lng: 18.5 },\n  AI: { lat: 18.25, lng: -63.1667 },\n  AQ: { lat: -90, lng: 0 },\n  AG: { lat: 17.05, lng: -61.8 },\n  AR: { lat: -34, lng: -64 },\n  AM: { lat: 40, lng: 45 },\n  AW: { lat: 12.5, lng: -69.9667 },\n  AU: { lat: -27, lng: 133 },\n  AT: { lat: 47.3333, lng: 13.3333 },\n  AZ: { lat: 40.5, lng: 47.5 },\n  BS: { lat: 24.25, lng: -76 },\n  BH: { lat: 26, lng: 50.55 },\n  BD: { lat: 24, lng: 90 },\n  BB: { lat: 13.1667, lng: -59.5333 },\n  BY: { lat: 53, lng: 28 },\n  BE: { lat: 50.8333, lng: 4 },\n  BZ: { lat: 17.25, lng: -88.75 },\n  BJ: { lat: 9.5, lng: 2.25 },\n  BM: { lat: 32.3333, lng: -64.75 },\n  BT: { lat: 27.5, lng: 90.5 },\n  BO: { lat: -17, lng: -65 },\n  BQ: { lat: 12.183333, lng: -68.233333 },\n  BA: { lat: 44, lng: 18 },\n  BW: { lat: -22, lng: 24 },\n  BV: { lat: -54.4333, lng: 3.4 },\n  BR: { lat: -10, lng: -55 },\n  IO: { lat: -6, lng: 71.5 },\n  BN: { lat: 4.5, lng: 114.6667 },\n  BG: { lat: 43, lng: 25 },\n  BF: { lat: 13, lng: -2 },\n  MM: { lat: 22, lng: 98 },\n  BI: { lat: -3.5, lng: 30 },\n  KH: { lat: 13, lng: 105 },\n  CM: { lat: 6, lng: 12 },\n  CA: { lat: 60, lng: -95 },\n  CV: { lat: 16, lng: -24 },\n  KY: { lat: 19.5, lng: -80.5 },\n  CF: { lat: 7, lng: 21 },\n  TD: { lat: 15, lng: 19 },\n  CL: { lat: -30, lng: -71 },\n  CN: { lat: 35, lng: 105 },\n  CX: { lat: -10.5, lng: 105.6667 },\n  CC: { lat: -12.5, lng: 96.8333 },\n  CO: { lat: 4, lng: -72 },\n  KM: { lat: -12.1667, lng: 44.25 },\n  CD: { lat: 0, lng: 25 },\n  CG: { lat: -1, lng: 15 },\n  CK: { lat: -21.2333, lng: -159.7667 },\n  CR: { lat: 10, lng: -84 },\n  CI: { lat: 8, lng: -5 },\n  HR: { lat: 45.1667, lng: 15.5 },\n  CU: { lat: 21.5, lng: -80 },\n  CW: { lat: 12.166667, lng: -68.966667 },\n  CY: { lat: 35, lng: 33 },\n  CZ: { lat: 49.75, lng: 15.5 },\n  DK: { lat: 56, lng: 10 },\n  DJ: { lat: 11.5, lng: 43 },\n  DM: { lat: 15.4167, lng: -61.3333 },\n  DO: { lat: 19, lng: -70.6667 },\n  EC: { lat: -2, lng: -77.5 },\n  EG: { lat: 27, lng: 30 },\n  SV: { lat: 13.8333, lng: -88.9167 },\n  GQ: { lat: 2, lng: 10 },\n  ER: { lat: 15, lng: 39 },\n  EE: { lat: 59, lng: 26 },\n  ET: { lat: 8, lng: 38 },\n  FK: { lat: -51.75, lng: -59 },\n  FO: { lat: 62, lng: -7 },\n  FJ: { lat: -18, lng: 175 },\n  FI: { lat: 64, lng: 26 },\n  FR: { lat: 46, lng: 2 },\n  GF: { lat: 4, lng: -53 },\n  PF: { lat: -15, lng: -140 },\n  TF: { lat: -43, lng: 67 },\n  GA: { lat: -1, lng: 11.75 },\n  GM: { lat: 13.4667, lng: -16.5667 },\n  GE: { lat: 42, lng: 43.5 },\n  DE: { lat: 51, lng: 9 },\n  GH: { lat: 8, lng: -2 },\n  GI: { lat: 36.1833, lng: -5.3667 },\n  GR: { lat: 39, lng: 22 },\n  GL: { lat: 72, lng: -40 },\n  GD: { lat: 12.1167, lng: -61.6667 },\n  GP: { lat: 16.25, lng: -61.5833 },\n  GU: { lat: 13.4667, lng: 144.7833 },\n  GT: { lat: 15.5, lng: -90.25 },\n  GG: { lat: 49.5, lng: -2.56 },\n  GW: { lat: 12, lng: -15 },\n  GN: { lat: 11, lng: -10 },\n  GY: { lat: 5, lng: -59 },\n  HT: { lat: 19, lng: -72.4167 },\n  HM: { lat: -53.1, lng: 72.5167 },\n  VA: { lat: 41.9, lng: 12.45 },\n  HN: { lat: 15, lng: -86.5 },\n  HK: { lat: 22.25, lng: 114.1667 },\n  HU: { lat: 47, lng: 20 },\n  IS: { lat: 65, lng: -18 },\n  IN: { lat: 20, lng: 77 },\n  ID: { lat: -5, lng: 120 },\n  IR: { lat: 32, lng: 53 },\n  IQ: { lat: 33, lng: 44 },\n  IE: { lat: 53, lng: -8 },\n  IM: { lat: 54.23, lng: -4.55 },\n  IL: { lat: 31.5, lng: 34.75 },\n  IT: { lat: 42.8333, lng: 12.8333 },\n  JM: { lat: 18.25, lng: -77.5 },\n  JP: { lat: 36, lng: 138 },\n  JE: { lat: 49.21, lng: -2.13 },\n  JO: { lat: 31, lng: 36 },\n  KZ: { lat: 48, lng: 68 },\n  KE: { lat: 1, lng: 38 },\n  KI: { lat: 1.4167, lng: 173 },\n  KP: { lat: 40, lng: 127 },\n  KR: { lat: 37, lng: 127.5 },\n  XK: { lat: 42.583333, lng: 21 },\n  KW: { lat: 29.3375, lng: 47.6581 },\n  KG: { lat: 41, lng: 75 },\n  LA: { lat: 18, lng: 105 },\n  LV: { lat: 57, lng: 25 },\n  LB: { lat: 33.8333, lng: 35.8333 },\n  LS: { lat: -29.5, lng: 28.5 },\n  LR: { lat: 6.5, lng: -9.5 },\n  LY: { lat: 25, lng: 17 },\n  LI: { lat: 47.1667, lng: 9.5333 },\n  LT: { lat: 56, lng: 24 },\n  LU: { lat: 49.75, lng: 6.1667 },\n  MO: { lat: 22.1667, lng: 113.55 },\n  MK: { lat: 41.8333, lng: 22 },\n  MG: { lat: -20, lng: 47 },\n  MW: { lat: -13.5, lng: 34 },\n  MY: { lat: 2.5, lng: 112.5 },\n  MV: { lat: 3.25, lng: 73 },\n  ML: { lat: 17, lng: -4 },\n  MT: { lat: 35.8333, lng: 14.5833 },\n  MH: { lat: 9, lng: 168 },\n  MQ: { lat: 14.6667, lng: -61 },\n  MR: { lat: 20, lng: -12 },\n  MU: { lat: -20.2833, lng: 57.55 },\n  YT: { lat: -12.8333, lng: 45.1667 },\n  MX: { lat: 23, lng: -102 },\n  FM: { lat: 6.9167, lng: 158.25 },\n  MD: { lat: 47, lng: 29 },\n  MC: { lat: 43.7333, lng: 7.4 },\n  MN: { lat: 46, lng: 105 },\n  ME: { lat: 42, lng: 19 },\n  MS: { lat: 16.75, lng: -62.2 },\n  MA: { lat: 32, lng: -5 },\n  MZ: { lat: -18.25, lng: 35 },\n  NA: { lat: -22, lng: 17 },\n  NR: { lat: -0.5333, lng: 166.9167 },\n  NP: { lat: 28, lng: 84 },\n  AN: { lat: 12.25, lng: -68.75 },\n  NL: { lat: 52.5, lng: 5.75 },\n  NC: { lat: -21.5, lng: 165.5 },\n  NZ: { lat: -41, lng: 174 },\n  NI: { lat: 13, lng: -85 },\n  NE: { lat: 16, lng: 8 },\n  NG: { lat: 10, lng: 8 },\n  NU: { lat: -19.0333, lng: -169.8667 },\n  NF: { lat: -29.0333, lng: 167.95 },\n  MP: { lat: 15.2, lng: 145.75 },\n  NO: { lat: 62, lng: 10 },\n  OM: { lat: 21, lng: 57 },\n  PK: { lat: 30, lng: 70 },\n  PW: { lat: 7.5, lng: 134.5 },\n  PS: { lat: 32, lng: 35.25 },\n  PA: { lat: 9, lng: -80 },\n  PG: { lat: -6, lng: 147 },\n  PY: { lat: -23, lng: -58 },\n  PE: { lat: -10, lng: -76 },\n  PH: { lat: 13, lng: 122 },\n  PN: { lat: -24.7, lng: -127.4 },\n  PL: { lat: 52, lng: 20 },\n  PT: { lat: 39.5, lng: -8 },\n  PR: { lat: 18.25, lng: -66.5 },\n  QA: { lat: 25.5, lng: 51.25 },\n  RE: { lat: -21.1, lng: 55.6 },\n  RO: { lat: 46, lng: 25 },\n  RU: { lat: 60, lng: 100 },\n  RW: { lat: -2, lng: 30 },\n  BL: { lat: 17.897728, lng: -62.834244 },\n  SH: { lat: -15.9333, lng: -5.7 },\n  KN: { lat: 17.3333, lng: -62.75 },\n  LC: { lat: 13.8833, lng: -61.1333 },\n  MF: { lat: 18.075278, lng: -63.06 },\n  PM: { lat: 46.8333, lng: -56.3333 },\n  VC: { lat: 13.25, lng: -61.2 },\n  WS: { lat: -13.5833, lng: -172.3333 },\n  SM: { lat: 43.7667, lng: 12.4167 },\n  ST: { lat: 1, lng: 7 },\n  SA: { lat: 25, lng: 45 },\n  SN: { lat: 14, lng: -14 },\n  RS: { lat: 44, lng: 21 },\n  SC: { lat: -4.5833, lng: 55.6667 },\n  SL: { lat: 8.5, lng: -11.5 },\n  SG: { lat: 1.3667, lng: 103.8 },\n  SX: { lat: 18.033333, lng: -63.05 },\n  SK: { lat: 48.6667, lng: 19.5 },\n  SI: { lat: 46, lng: 15 },\n  SB: { lat: -8, lng: 159 },\n  SO: { lat: 10, lng: 49 },\n  ZA: { lat: -29, lng: 24 },\n  GS: { lat: -54.5, lng: -37 },\n  SS: { lat: 8, lng: 30 },\n  ES: { lat: 40, lng: -4 },\n  LK: { lat: 7, lng: 81 },\n  SD: { lat: 15, lng: 30 },\n  SR: { lat: 4, lng: -56 },\n  SJ: { lat: 78, lng: 20 },\n  SZ: { lat: -26.5, lng: 31.5 },\n  SE: { lat: 62, lng: 15 },\n  CH: { lat: 47, lng: 8 },\n  SY: { lat: 35, lng: 38 },\n  TW: { lat: 23.5, lng: 121 },\n  TJ: { lat: 39, lng: 71 },\n  TZ: { lat: -6, lng: 35 },\n  TH: { lat: 15, lng: 100 },\n  TL: { lat: -8.55, lng: 125.5167 },\n  TG: { lat: 8, lng: 1.1667 },\n  TK: { lat: -9, lng: -172 },\n  TO: { lat: -20, lng: -175 },\n  TT: { lat: 11, lng: -61 },\n  TN: { lat: 34, lng: 9 },\n  TR: { lat: 39, lng: 35 },\n  TM: { lat: 40, lng: 60 },\n  TC: { lat: 21.75, lng: -71.5833 },\n  TV: { lat: -8, lng: 178 },\n  UG: { lat: 1, lng: 32 },\n  UA: { lat: 49, lng: 32 },\n  AE: { lat: 24, lng: 54 },\n  GB: { lat: 54, lng: -2 },\n  UM: { lat: 19.2833, lng: 166.6 },\n  US: { lat: 38, lng: -97 },\n  UY: { lat: -33, lng: -56 },\n  UZ: { lat: 41, lng: 64 },\n  VU: { lat: -16, lng: 167 },\n  VE: { lat: 8, lng: -66 },\n  VN: { lat: 16, lng: 106 },\n  VG: { lat: 18.5, lng: -64.5 },\n  VI: { lat: 18.3333, lng: -64.8333 },\n  WF: { lat: -13.3, lng: -176.2 },\n  EH: { lat: 24.5, lng: -13 },\n  YE: { lat: 15, lng: 48 },\n  ZM: { lat: -15, lng: 30 },\n  ZW: { lat: -20, lng: 30 },\n} as const satisfies Record<string, Location>;\n\nexport const AWS_REGIONS = {\n  WEST_US: {\n    code: 'us-west-1',\n    displayName: 'West US (North California)',\n    location: { lat: 37.774929, lng: -122.419418 },\n  },\n  EAST_US: {\n    code: 'us-east-1',\n    displayName: 'East US (North Virginia)',\n    location: { lat: 37.926868, lng: -78.024902 },\n  },\n  EAST_US_2: {\n    code: 'us-east-2',\n    displayName: 'East US (Ohio)',\n    location: { lat: 39.9612, lng: -82.9988 },\n  },\n  CENTRAL_CANADA: {\n    code: 'ca-central-1',\n    displayName: 'Canada (Central)',\n    location: { lat: 56.130367, lng: -106.346771 },\n  },\n  WEST_EU: {\n    code: 'eu-west-1',\n    displayName: 'West EU (Ireland)',\n    location: { lat: 53.3498, lng: -6.2603 },\n  },\n  WEST_EU_2: {\n    code: 'eu-west-2',\n    displayName: 'West Europe (London)',\n    location: { lat: 51.507351, lng: -0.127758 },\n  },\n  WEST_EU_3: {\n    code: 'eu-west-3',\n    displayName: 'West EU (Paris)',\n    location: { lat: 2.352222, lng: 48.856613 },\n  },\n  CENTRAL_EU: {\n    code: 'eu-central-1',\n    displayName: 'Central EU (Frankfurt)',\n    location: { lat: 50.110924, lng: 8.682127 },\n  },\n  CENTRAL_EU_2: {\n    code: 'eu-central-2',\n    displayName: 'Central Europe (Zurich)',\n    location: { lat: 47.3744489, lng: 8.5410422 },\n  },\n  NORTH_EU: {\n    code: 'eu-north-1',\n    displayName: 'North EU (Stockholm)',\n    location: { lat: 59.3251172, lng: 18.0710935 },\n  },\n  SOUTH_ASIA: {\n    code: 'ap-south-1',\n    displayName: 'South Asia (Mumbai)',\n    location: { lat: 18.9733536, lng: 72.8281049 },\n  },\n  SOUTHEAST_ASIA: {\n    code: 'ap-southeast-1',\n    displayName: 'Southeast Asia (Singapore)',\n    location: { lat: 1.357107, lng: 103.8194992 },\n  },\n  NORTHEAST_ASIA: {\n    code: 'ap-northeast-1',\n    displayName: 'Northeast Asia (Tokyo)',\n    location: { lat: 35.6895, lng: 139.6917 },\n  },\n  NORTHEAST_ASIA_2: {\n    code: 'ap-northeast-2',\n    displayName: 'Northeast Asia (Seoul)',\n    location: { lat: 37.5665, lng: 126.978 },\n  },\n  OCEANIA: {\n    code: 'ap-southeast-2',\n    displayName: 'Oceania (Sydney)',\n    location: { lat: -33.8688, lng: 151.2093 },\n  },\n  SOUTH_AMERICA: {\n    code: 'sa-east-1',\n    displayName: 'South America (São Paulo)',\n    location: { lat: -1.2043218, lng: -47.1583944 },\n  },\n} as const satisfies Record<string, AwsRegion>;\n\nexport type RegionCodes = ValueOf<typeof AWS_REGIONS>['code'];\n\nexport const AWS_REGION_CODES = Object.values(AWS_REGIONS).map(\n  (region) => region.code\n) as UnionToTuple<RegionCodes>;\n\n/**\n * Calculates the closest AWS region to a given location.\n */\nexport function getClosestAwsRegion(location: Location) {\n  const distances = Object.entries(AWS_REGIONS).map<\n    [region: string, distance: number]\n  >(([name, region]) => {\n    return [name, getDistance(location, region.location)] as const;\n  });\n\n  const closestRegion = distances.reduce<\n    [region: string, distance: number] | undefined\n  >(\n    (min, current) =>\n      min === undefined ? current : current[1] < min[1] ? current : min,\n    undefined\n  );\n\n  if (!closestRegion) {\n    throw new Error('no closest region found');\n  }\n\n  const [regionName] = closestRegion;\n\n  return AWS_REGIONS[regionName as keyof typeof AWS_REGIONS];\n}\n\n/**\n * Fetches the user's country code based on their IP address.\n */\nexport async function getCountryCode() {\n  const response = await fetch(TRACE_URL);\n  const data = await response.text();\n  const info = parseKeyValueList(data);\n  const countryCode = info['loc'];\n\n  if (!countryCode) {\n    throw new Error('location not found');\n  }\n\n  return countryCode;\n}\n\n/**\n * Gets the approximate coordinates of a country based on its country code.\n */\nexport function getCountryCoordinates(countryCode: string) {\n  const location: Location =\n    COUNTRY_COORDINATES[countryCode as keyof typeof COUNTRY_COORDINATES];\n\n  if (!location) {\n    throw new Error(`unknown location code: ${countryCode}`);\n  }\n\n  return location;\n}\n\n/**\n * Calculates the distance between two points on Earth using the Haversine formula.\n *\n * @returns Distance between the points in kilometers\n */\nexport function getDistance(a: Location, b: Location): number {\n  const lat = degreesToRadians(b.lat - a.lat);\n  const lng = degreesToRadians(b.lng - a.lng);\n  const a1 =\n    Math.sin(lat / 2) * Math.sin(lat / 2) +\n    Math.cos(degreesToRadians(a.lat)) *\n      Math.cos(degreesToRadians(b.lat)) *\n      Math.sin(lng / 2) *\n      Math.sin(lng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a1), Math.sqrt(1 - a1));\n  return EARTH_RADIUS * c;\n}\n\n/**\n * Converts degrees to radians\n *\n * @returns The angle in radians\n */\nexport function degreesToRadians(deg: number): number {\n  return deg * (Math.PI / 180);\n}\n"],"mappings":"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","names":["version","createMcpServer","tool","z","stripIndent","getLogQuery","service","limit","createClient","z","createManagementApiClient","baseUrl","accessToken","headers","errorSchema","assertSuccess","response","fallbackMessage","errorContent","UPPERCASE_CHARS","LOWERCASE_CHARS","NUMBER_CHARS","SYMBOL_CHARS","generatePassword","length","numbers","symbols","uppercase","lowercase","chars","randomValues","password","i","randomIndex","stripIndent","columns_default","extensions_default","tables_default","DEFAULT_SYSTEM_SCHEMAS","listTablesSql","schemas","sql","stripIndent","tables_default","columns_default","coalesceRowsToArray","s","listExtensionsSql","extensions_default","source","filter","PROJECT_COST_MONTHLY","BRANCH_COST_HOURLY","getNextProjectCost","managementApiClient","orgId","orgResponse","assertSuccess","projectsResponse","org","activeProjects","project","amount","getBranchCost","parseKeyValueList","data","item","key","value","hashObject","obj","length","str","_","result","buffer","EARTH_RADIUS","TRACE_URL","COUNTRY_COORDINATES","AWS_REGIONS","AWS_REGION_CODES","region","getClosestAwsRegion","location","closestRegion","name","getDistance","min","current","regionName","getCountryCode","data","countryCode","parseKeyValueList","getCountryCoordinates","a","b","lat","degreesToRadians","lng","a1","c","deg","createSupabaseMcpServer","options","managementApiUrl","managementApiClient","executeSql","projectId","query","response","assertSuccess","getClosestRegion","getClosestAwsRegion","getCountryCoordinates","getCountryCode","createMcpServer","version","clientInfo","createManagementApiClient","tool","z","id","type","organization_id","generateResponse","cost","getNextProjectCost","getBranchCost","hashObject","AWS_REGION_CODES","name","region","confirm_cost_id","generatePassword","project_id","organizationId","schemas","sql","listTablesSql","listExtensionsSql","service","timestamp","getLogQuery","anonKey","key","createBranchResponse","branch_id","migration_version"]}